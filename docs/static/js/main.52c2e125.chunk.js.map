{"version":3,"sources":["Components/AddCategory.js","Components/GifGridItem.js","Components/GifGrid.js","GitExperteApp.js","index.js"],"names":["AddCategory","setAnimales","useState","categoria","setCategoria","onSubmit","e","preventDefault","trim","length","animales","type","value","onChange","target","GifGridItem","title","url","className","src","alt","GifGrid","images","setImages","useEffect","GetGifs","a","search","urlComplete","fetch","toString","resp","json","data","gifs","map","img","id","downsized_medium","GitExpertApp","animal","onClick","prototype","PropTypes","func","isRequired","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAEaA,EAAY,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,YAGvB,EAA+BC,mBAAS,IAAxC,mBAAOC,EAAP,KAAiBC,EAAjB,KAkBA,OACE,mCACE,sBAAMC,SAba,SAACC,GACpBA,EAAEC,iBAECJ,EAAUK,OAAOC,OAAS,GACzBR,GAAY,SAAAS,GAAQ,OAAKP,GAAL,mBAAkBO,QAS1C,SACE,uBACEC,KAAK,OACLC,MAAOT,EACPU,SArBgB,SAACP,GACrBF,EAAaE,EAAEQ,OAAOF,e,+BCPjBG,EAAY,SAAC,GAAe,IAAdC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,IAG7B,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,QCHHK,EAAQ,SAAC,GAAe,IAAdlB,EAAa,EAAbA,UAEnB,EAAyBD,mBAAS,IAAlC,mBAAOoB,EAAP,KAAcC,EAAd,KAGAC,qBAAU,WACNC,MACF,IAEF,IAAMA,EAAO,uCAAE,sCAAAC,EAAA,4DACI,sCACF,qDACPC,EAHK,aAGSxB,GAEdyB,EAJS,sCAIcD,EAHhB,qDAFF,SAOOE,MAAMD,EAAYE,YAPzB,cAOLC,EAPK,gBAQUA,EAAKC,OARf,gBAQJC,EARI,EAQJA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAClB,MAAO,CACHC,GAAGD,EAAIC,GACPrB,MAAMoB,EAAIpB,MACVC,IAAImB,EAAId,OAAOgB,iBAAiBrB,QAIxCM,EAAUW,GAlBC,4CAAF,qDAwBb,OACE,qCAEE,6BAAK/B,IACL,qBAAKe,UAAU,WAAf,SACGI,EAAOa,KAAI,SAACC,GACX,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,a,QCvC5BE,EAAa,WACtB,MAA4BrC,mBAAS,IAArC,mBAAMQ,EAAN,KAAeT,EAAf,KAKA,OACI,gCACI,8CACA,uBACA,cAAC,EAAD,CAAaA,YAAaA,IAC1B,6BAEQS,EAASyB,KAAI,SAAAK,GACV,OAAO,cAAC,EAAD,CAAsBrC,UAAWqC,GAAnBA,QAIhC,wBAAQC,QAfC,WACbxC,EAAY,YAAIS,KAcZ,qBAKZV,EAAY0C,UAAU,CAClBzC,Y,OAAY0C,EAAUC,KAAKC,YCvB/BC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.52c2e125.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport const AddCategory=({setAnimales})=>{\r\n\r\n    //Variables\r\n    const [categoria,setCategoria]=useState('');\r\n\r\n    //Eventos\r\n    const OnChangeTextInput=(e)=>{\r\n        setCategoria(e.target.value);\r\n    }\r\n\r\n    const EnviarFormulario=(e)=>{\r\n        e.preventDefault();\r\n\r\n        if(categoria.trim().length > 0){\r\n            setAnimales(animales => [categoria,...animales] );\r\n        }\r\n        \r\n       \r\n    }\r\n\r\n\r\n    return (\r\n      <>\r\n        <form onSubmit={EnviarFormulario}>\r\n          <input\r\n            type=\"text\"\r\n            value={categoria}\r\n            onChange={OnChangeTextInput}\r\n          ></input>\r\n        </form>\r\n      </>\r\n    );\r\n}","import React from \"react\";\r\n\r\nexport const GifGridItem=({title,url})=>{\r\n\r\n    \r\n    return (\r\n        <div className=\"card\">\r\n            <img src={url} alt={title}></img>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n\r\n}","import React, { useEffect, useState } from \"react\";\r\nimport { useFechApiGif } from \"../hooks/useFechApiGif\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\n\r\nexport const GifGrid=({categoria})=>{\r\n\r\n    const [images,setImages]=useState([]);\r\n    //const {loading} = useFechApiGif();\r\n   \r\n    useEffect(()=>{\r\n        GetGifs();\r\n    },[]);\r\n\r\n    const GetGifs =async()=>{\r\n        const urlRaice='http://api.giphy.com/v1/gifs/search';\r\n        const apiKey='&limit=10&api_key=rRuEoSsq7XcSNrsReG1es58GLx9xp367';\r\n        const search =`?q=${categoria}`;\r\n\r\n        const urlComplete = urlRaice+search+apiKey;\r\n\r\n        const resp =await fetch(urlComplete.toString());\r\n        const {data} = await resp.json();\r\n        \r\n        const gifs = data.map(img =>{\r\n            return {\r\n                id:img.id,\r\n                title:img.title,\r\n                url:img.images.downsized_medium.url\r\n            }\r\n        });\r\n\r\n        setImages(gifs);\r\n\r\n        //El userEfectt no permite que al recargar la pagina vuelva a hacer peticiones\r\n    \r\n   }\r\n\r\n    return (\r\n      <>\r\n       \r\n        <h1>{categoria}</h1>\r\n        <div className=\"cardGrid\">\r\n          {images.map((img) => {\r\n            return <GifGridItem key={img.id} {...img} />;\r\n          })}\r\n        </div> \r\n      </>\r\n    );\r\n}","import  { useState } from 'react';\r\nimport { AddCategory } from './Components/AddCategory';\r\nimport { GifGrid} from './Components/GifGrid';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const GitExpertApp=()=>{\r\n    const[animales,setAnimales]=useState([]);\r\n\r\n    const HadleAdd = ()=>{\r\n        setAnimales([...animales]);\r\n    }\r\n    return (\r\n        <div>\r\n            <h2>GitExpertApp</h2>\r\n            <hr></hr>\r\n            <AddCategory setAnimales={setAnimales}/>\r\n            <ol>\r\n                {\r\n                    animales.map(animal =>{\r\n                       return <GifGrid key={animal} categoria={animal}/>\r\n                    })\r\n                }\r\n            </ol>\r\n            <button onClick={HadleAdd}>Add</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nAddCategory.prototype={\r\n    setAnimales:PropTypes.func.isRequired\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport {GitExpertApp} from './GitExperteApp';\n\nReactDOM.render(\n  <React.StrictMode>\n    <GitExpertApp />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}